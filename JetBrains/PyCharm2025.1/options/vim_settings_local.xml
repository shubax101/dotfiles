<application>
  <component name="VimHistorySettings">
    <history>
      <history-cmd>
        <entry encoding="base64">c291cmNlIH4uL2lkZWF2aW1yYw==</entry>
        <entry encoding="base64">Vw==</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry encoding="base64">dw==</entry>
      </history-cmd>
      <history-search>
        <entry encoding="base64" />
      </history-search>
    </history>
  </component>
  <component name="VimJumpsSettings">
    <project id="PwCpTxtExtractor-bfcbb0d5">
      <jump line="498" column="33" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="496" column="22" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="491" column="14" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="483" column="18" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="482" column="45" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="497" column="18" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="455" column="93" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="451" column="69" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="468" column="62" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="448" column="49" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="445" column="47" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="439" column="46" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="452" column="61" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="502" column="18" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="463" column="87" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="484" column="4" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="444" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="97" column="0" filename="$USER_HOME$/programming/Python/Cp-Extractor/venv/lib/python3.12/site-packages/pyromod/listen/message_handler.py" protocol="file" />
      <jump line="458" column="85" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="462" column="70" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="461" column="64" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="460" column="72" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="456" column="61" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="495" column="23" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="473" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="459" column="64" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="454" column="59" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="474" column="45" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="457" column="69" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="8" column="14" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/config.py" protocol="file" />
      <jump line="521" column="16" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="100" column="36" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="518" column="20" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="511" column="26" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="503" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="516" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="528" column="31" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="507" column="44" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="508" column="69" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="505" column="38" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="520" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="501" column="25" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="500" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="509" column="19" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="0" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/6775241398_Batch-52-Static GK Batch-Inspector बैच by S K Dambiwal Sir.txt" protocol="file" />
      <jump line="506" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="512" column="60" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="517" column="22" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="411" column="143" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="401" column="50" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="419" column="63" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="412" column="61" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="29" column="10" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/app.json" protocol="file" />
      <jump line="5" column="534" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/config.py" protocol="file" />
      <jump line="0" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/6775241398_History [इतिहास]-रणभूमि बैच-देशी जुगाड़ वाला by S K Dambiwal SIR.txt" protocol="file" />
      <jump line="28" column="23" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/app.json" protocol="file" />
      <jump line="6" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/config.py" protocol="file" />
      <jump line="548" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="549" column="49" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="566" column="8" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="564" column="13" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="565" column="20" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="557" column="37" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="561" column="35" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="91" column="42" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="90" column="124" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="63" column="4" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="61" column="8" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="70" column="29" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="69" column="28" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="147" column="20" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="137" column="62" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="526" column="21" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="527" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="248" column="4" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="295" column="49" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="287" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="302" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="293" column="40" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="288" column="16" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="317" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="313" column="129" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="181" column="59" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="180" column="24" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="249" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="195" column="29" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="202" column="23" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="210" column="55" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="121" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="103" column="27" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="80" column="87" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="99" column="6" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="85" column="39" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="124" column="23" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="125" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="299" column="49" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="82" column="11" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="112" column="0" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="132" column="45" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
      <jump line="51" column="12" filename="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" protocol="file" />
    </project>
    <project id="quiz_era-8c044197">
      <jump line="0" column="0" filename="$USER_HOME$/programming/Python/quiz_era/backup/app.py" protocol="file" />
      <jump line="326" column="44" filename="$USER_HOME$/programming/Python/quiz_era/backup/app.py" protocol="file" />
      <jump line="321" column="22" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="0" column="0" filename="$USER_HOME$/programming/Python/quiz_era/backup/app old.py" protocol="file" />
      <jump line="57" column="41" filename="$USER_HOME$/programming/Python/quiz_era/backup/app old.py" protocol="file" />
      <jump line="321" column="21" filename="$USER_HOME$/programming/Python/quiz_era/backup/app.py" protocol="file" />
      <jump line="352" column="17" filename="$USER_HOME$/programming/Python/quiz_era/backup/app.py" protocol="file" />
      <jump line="349" column="19" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="355" column="3" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="420" column="17" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="364" column="34" filename="$USER_HOME$/programming/Python/quiz_era/backup/app.py" protocol="file" />
      <jump line="416" column="0" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="425" column="10" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="408" column="29" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="412" column="35" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="411" column="0" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="18" column="13" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="16" column="6" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="0" column="0" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
      <jump line="7" column="11" filename="$USER_HOME$/programming/Python/quiz_era/app.py" protocol="file" />
    </project>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <localmarks>
      <file name="$USER_HOME$/programming/Python/Cp-Extractor/venv/lib/python3.12/site-packages/pyromod/listen/message_handler.py" timestamp="1752417159393">
        <mark key="&quot;" line="97" column="0" />
      </file>
      <file name="$USER_HOME$/programming/Python/quiz_era/app.py" timestamp="1752586884416">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="286" column="0" />
        <mark key="]" line="375" column="0" />
        <mark key="." line="375" column="0" />
        <mark key="^" line="375" column="0" />
      </file>
      <file name="$USER_HOME$/programming/Python/PwCpTxtExtractor/app.json" timestamp="1752425378850">
        <mark key="[" line="28" column="22" />
        <mark key="]" line="28" column="24" />
        <mark key="^" line="28" column="24" />
        <mark key="." line="28" column="23" />
      </file>
      <file name="$USER_HOME$/programming/Python/PwCpTxtExtractor/6775241398_Batch-52-Static GK Batch-Inspector बैच by S K Dambiwal Sir.txt" timestamp="1752424053084">
        <mark key="&quot;" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/programming/Python/PwCpTxtExtractor/config.py" timestamp="1752425363463">
        <mark key="[" line="5" column="53" />
        <mark key="]" line="5" column="53" />
        <mark key="^" line="5" column="567" />
        <mark key="." line="5" column="53" />
      </file>
      <file name="$USER_HOME$/programming/Python/quiz_era/backup/app.py" timestamp="1752586137648">
        <mark key="[" line="43" column="18" />
      </file>
      <file name="$USER_HOME$/programming/Python/quiz_era/backup/app old.py" timestamp="1752586247593">
        <mark key="&quot;" line="57" column="41" />
        <mark key="[" line="18" column="26" />
      </file>
      <file name="$USER_HOME$/programming/Python/PwCpTxtExtractor/main.py" timestamp="1752426403004">
        <mark key="'" line="51" column="12" />
        <mark key="[" line="302" column="5" />
        <mark key="]" line="302" column="5" />
        <mark key="." line="302" column="5" />
      </file>
    </localmarks>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="LINE_WISE">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="CHARACTER_WISE">
        <text encoding="base64">LA==</text>
      </register>
      <register name="." type="CHARACTER_WISE">
        <text encoding="base64" />
      </register>
      <register name="0" type="LINE_WISE">
        <text encoding="base64">ICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkhvc3QiOiAiYXBpLmNsYXNzcGx1c2FwcC5jb20iLAogICAgICAgICJYLUFjY2Vzcy1Ub2tlbiI6IGNsYXNzcGx1c190b2tlbiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb2JpbGUtQW5kcm9pZCIsCiAgICAgICAgIkFwcC1WZXJzaW9uIjogIjEuOC4yLjEiLAogICAgICAgICJBcGktVmVyc2lvbiI6ICI1MyIsCiAgICAgICAgIkRldmljZS1JZCI6ICI4MTRlMjAxYTViYjQ3ODMyIiwKICAgICAgICAiRGV2aWNlLURldGFpbHMiOiAiWGlhb21pX1JlZG1pIE5vdGUgN19TREstMzUiLAogICAgICAgICJSZWdpb24iOiAiSU4iLAogICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICJYLUNocm9tZS1WZXJzaW9uIjogIjEzOC4wLjcyMDQuNjMiLAogICAgICAgICJYLVdlYnZpZXctVmVyc2lvbiI6ICIxMzguMC43MjA0LjYzIiwKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJCdWlsZC1OdW1iZXIiOiAiNTMiLAogICAgICAgICJJc3Jldmlld2Vyb24iOiAiMCIsCiAgICAgICAgIklzLUFwayI6ICIwIiwKICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIgogICAgfSwK</text>
      </register>
      <register name="1" type="LINE_WISE">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="LINE_WISE">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczIgPSB7ICd4LWFjY2Vzcy10b2tlbic6IGNsYXNzcGx1c190b2tlbn0K</text>
      </register>
      <register name="3" type="LINE_WISE">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczIgPSB7ICd4LWFjY2Vzcy10b2tlbic6IGNsYXNzcGx1c190b2tlbn0K</text>
      </register>
      <register name="4" type="LINE_WISE">
        <text encoding="base64">ICAgICAgICAgICAgaGFzaF9oZWFkZXJzID0gewogICAgICAgICAgICAgICAKICAgICAgICAgICAgfQo=</text>
      </register>
      <register name="5" type="CHARACTER_WISE">
        <text encoding="base64">ICdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC43JywKICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnIsIHpzdGQnLAogICAgICAgICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICAgICAgICAgICAnU2VjLUNILVVBJzogJyJDaHJvbWl1bSI7dj0iMTI4IiwgIk5vdDtBPUJyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMjgiJywKICAgICAgICAgICAgICAgICdTZWMtQ0gtVUEtTW9iaWxlJzogJz8wJywKICAgICAgICAgICAgICAgICdTZWMtQ0gtVUEtUGxhdGZvcm0nOiAnIldpbmRvd3MiJywKICAgICAgICAgICAgICAgICdTZWMtRmV0Y2gtRGVzdCc6ICdkb2N1bWVudCcsCiAgICAgICAgICAgICAgICAnU2VjLUZldGNoLU1vZGUnOiAnbmF2aWdhdGUnLAogICAgICAgICAgICAgICAgJ1NlYy1GZXRjaC1TaXRlJzogJ3NhbWUtb3JpZ2luJywKICAgICAgICAgICAgICAgICdTZWMtRmV0Y2gtVXNlcic6ICc/MScsCiAgICAgICAgICAgICAgICAnVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyc6ICcxJywKICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMjguMC4wLjAgU2FmYXJpLzUzNy4zNic=</text>
      </register>
      <register name="6" type="LINE_WISE">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="LINE_WISE">
        <text encoding="base64">ICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vcXN2Zm4uY291cnNlcy5zdG9yZS8/bWFpbkNhdGVnb3J5PTAmc3ViQ2F0TGlzdD1bMTMwNTA0LDYyNDQyXScsCg==</text>
      </register>
      <register name="8" type="LINE_WISE">
        <text encoding="base64">ICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vcXN2Zm4uY291cnNlcy5zdG9yZS8/bWFpbkNhdGVnb3J5PTAmc3ViQ2F0TGlzdD1bMTMwNTA0LDYyNDQyXScsCg==</text>
      </register>
      <register name="9" type="LINE_WISE">
        <text encoding="base64">Cg==</text>
      </register>
      <register name=":" type="CHARACTER_WISE">
        <text encoding="base64">dw==</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-offset encoding="base64" />
      <last-dir encoding="base64">MQ==</last-dir>
      <show-last encoding="base64">ZmFsc2U=</show-last>
    </search>
  </component>
  <component name="VimVariables">
    <vim-variables />
  </component>
</application>